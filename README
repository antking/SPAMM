Welcome to bitbucket!  Hello!


In case this is your first time using version control and online repositories, here 
is a brief overview.  The code is stored in a repository on bitbucket.  You can 
"pull" the most recent version of the code from the online repository, make changes 
on your local copy of the code, "commit" those changes, and then "push" those 
changes from your local copy to the online repository copy of the code.  

To initially download a new repository to your local file system:
1.) Create a local directory where you want this repository to live.
2.) Copy the "https:username..." from the Bitbucket.
3.) Enter the following into your command line: $ git clone https://...

The very first time you push something from a newly created local repository, you need to use the following:
$ git push -u origin master
**Note, you do NOT need to use this for any subsequent pushes from this local repository

There are a couple good habits to cultivate when using version control in 
collaboration with others.  

The first is to always make sure you are up-to-date on the newest version
of the online repository before you start changing the code by doing:
$ git pull
This will pull any changes that have been pushed to the online repository to your 
local copy of the repository.  You will be prompted to enter your password, so  you 
may as well go ahead and make it something you can remember.  

The second thing is to commit your work in stages, once you have completed and 
tested a specific part.  Some useful commands to help you track changes to the code:
$ git status
tells you which files have been changed since the last commit.
$ git diff
shows you specific changes to any files that have been changed.
$ git ls-files
lists all files that are being tracked by git.
$ git add [file name]
adds a file that you want to be tracked.
$ git rm [file name]
removes a file and keeps it from being tracked.
$ git log
shows you recent commits.
$ git commit [file name]
commits a specific file. You can also just use "git add" to add files to be commited
and then just type "git commit".
$ git checkout [file name]
allows you to reload a file as it was during the last commit.  This is extremely 
useful if you want to play around with a code, adding various print statements, and 
then when you want to commit new changes, you don't have to edit the code to change 
it back, you just have to type "checkout" and all changes since the last commit will 
be deleted. 

The third thing is to make sure you remember to push your changes from the local 
copy to the online repository, otherwise no one else will be able to use your edits:
$ git push
You will again be prompted to enter your password.

The fourth thing is just a general reminder to comment your work so that everyone
knows what is going on.

One other important thing to keep in mind when deciding how to go about editing the 
code is to consider making branches of the code where you can test new features while
leaving the "master" branch unchanged.  You can view the branches on your local
machine by typing:
$ git branch
This will be very useful once we have a basic working code and we want to add and test
new features without messing up the basic working code.
